name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: 'pip'

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 mypy isort

      - name: Check code formatting with Black
        run: black --check --diff src/ tests/

      - name: Check import sorting with isort
        run: isort --check-only --diff src/ tests/

      - name: Lint with flake8
        run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Type checking with mypy
        run: mypy src/ --ignore-missing-imports
        continue-on-error: true  # Type checking is advisory for now

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: 'pip'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install Faker python-docx

      - name: Run unit tests
        run: |
          python -m pytest tests/ -v --tb=short
        env:
          PYTHONPATH: .

      - name: Generate test coverage report
        run: |
          pip install coverage pytest-cov
          python -m pytest tests/ --cov=src --cov-report=xml --cov-report=term
        continue-on-error: true

      - name: Upload coverage to artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml
        if: always()

  integration-tests:
    name: Integration Tests (AI-Powered)
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: 'pip'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install Faker python-docx

      - name: Validate API key is available
        run: |
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "‚ùå OPENAI_API_KEY secret is not set"
            echo "Please add your OpenAI API key to repository secrets"
            exit 1
          else
            echo "‚úÖ OpenAI API key is configured"
          fi

      - name: Generate test documents and manifest
        run: python -m src.test_data_generator
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PYTHONPATH: .

      - name: Run end-to-end verification
        run: python -m src.run_and_verify
        env:
          PYTHONPATH: .

      - name: Upload test documents artifact
        uses: actions/upload-artifact@v3
        with:
          name: test-documents-${{ github.run_number }}
          path: test_documents/
        if: always()

      - name: Upload verification logs
        uses: actions/upload-artifact@v3
        with:
          name: verification-logs-${{ github.run_number }}
          path: |
            test_documents/manifest.json
        if: always()

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install security scanning tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Check for known security vulnerabilities
        run: |
          pip install -r requirements.txt
          safety check --json || true

      - name: Run bandit security linter
        run: bandit -r src/ -f json || true

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, security-scan]
    if: always()
    
    steps:
      - name: Check job statuses
        run: |
          echo "üìä Build Summary:"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          
          if [[ "${{ needs.lint.result }}" == "failure" || "${{ needs.unit-tests.result }}" == "failure" || "${{ needs.integration-tests.result }}" == "failure" ]]; then
            echo "‚ùå Build failed - see job details above"
            exit 1
          else
            echo "‚úÖ All critical jobs passed!"
          fi 