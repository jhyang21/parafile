name: Continuous Integration

on:
  push:
    branches: [main, develop, v0.0.2]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: write  # Needed to push commits back to the repository
  pull-requests: write  # Needed to update PR branches

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.set-key.outputs.key }}
    steps:
      - name: Set cache key
        id: set-key
        run: echo "key=${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}" >> "$GITHUB_OUTPUT"

  lint:
    name: Code Quality & Linting with Auto-fix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: 'pip'

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e ".[dev]"
          pip install autopep8  # For fixing flake8 issues

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Run Black (auto-fix)
        run: |
          echo "Running Black formatter..."
          black .
          
      - name: Run isort (auto-fix)
        run: |
          echo "Running isort import sorter..."
          isort .

      - name: Run autopep8 (auto-fix common flake8 issues)
        run: |
          echo "Running autopep8 to fix common style issues..."
          autopep8 --in-place --recursive --aggressive --aggressive .

      - name: Check for changes and commit
        run: |
          if git diff --quiet; then
            echo "No formatting changes needed"
          else
            echo "Formatting changes detected, committing..."
            git add -A
            git commit -m "ðŸ¤– Auto-fix: Apply black, isort, and autopep8 formatting"
            
            # Only push if this is a push event (not a PR from a fork)
            if [[ "${{ github.event_name }}" == "push" ]]; then
              git push
              echo "Changes pushed to repository"
            elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.head.repo.full_name }}" == "${{ github.repository }}" ]]; then
              git push origin HEAD:${{ github.head_ref }}
              echo "Changes pushed to PR branch"
            else
              echo "Skipping push for fork-based PR"
            fi
          fi

      - name: Run Black (verification)
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: |
          echo "Verifying Black formatting..."
          black --check --diff .

      - name: Run isort (verification)
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: |
          echo "Verifying isort formatting..."
          isort --check-only --diff .

      - name: Run flake8
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: |
          echo "Running flake8 style checks..."
          flake8

      - name: Run mypy
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: |
          echo "Running mypy type checks..."
          mypy src/

  # Separate lint job for other Python versions (check-only)
  lint-check:
    name: Code Quality Check (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    strategy:
      matrix:
        python-version: ["3.9", "3.10"]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Black (check-only)
        run: black --check --diff .

      - name: Run isort (check-only)
        run: isort --check-only --diff .

      - name: Run flake8
        run: flake8

      - name: Run mypy
        run: mypy src/

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [lint]
    if: always() && (needs.lint.result == 'success')
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e ".[test]"

      - name: Run tests
        run: pytest
        env:
          PYTHONPATH: .

      - name: Generate coverage report
        run: pytest --cov --cov-report=xml --cov-report=term
        if: matrix.python-version == '3.11'  # Only generate coverage on latest version

      - uses: actions/upload-artifact@v3
        if: matrix.python-version == '3.11'
        with:
          name: coverage-report
          path: coverage.xml

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    if: always() && (needs.lint.result == 'success' && needs.unit-tests.result == 'success')

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"  # Use latest stable for integration tests
          cache: 'pip'

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e ".[test]"

      - name: Validate OPENAI_API_KEY
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "OPENAI_API_KEY is not set"
            exit 1
          else
            echo "OPENAI_API_KEY is set"
          fi
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Generate test documents
        run: python -m src.test_data_generator
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PYTHONPATH: .

      - name: Run verification
        run: python -m src.run_and_verify
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PYTHONPATH: .

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-documents-${{ github.run_number }}
          path: test_documents/

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: verification-logs-${{ github.run_number }}
          path: test_documents/manifest.json

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [lint]
    if: always() && (needs.lint.result == 'success')

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e ".[security]"

      - name: Run safety check
        run: safety check --exit-code
        continue-on-error: false  # Fail on security vulnerabilities

      - name: Run bandit security scan
        run: bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true  # Don't fail build on bandit issues initially

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: bandit-report.json

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [lint, lint-check, unit-tests, integration-tests, security-scan]
    if: always()

    steps:
      - name: Summarize build
        run: |
          echo "Build Summary:"
          echo "Lint (Auto-fix): ${{ needs.lint.result }}"
          echo "Lint (Check): ${{ needs.lint-check.result || 'skipped' }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"

          # Only check lint-check result if it ran (main/develop branches)
          lint_check_failed=""
          if [[ "${{ needs.lint-check.result }}" == "failure" ]]; then
            lint_check_failed="true"
          fi

          if [[ "${{ needs.lint.result }}" == "failure" || "$lint_check_failed" == "true" || "${{ needs.unit-tests.result }}" == "failure" ]]; then
            echo "[FAIL] Critical jobs failed"
            exit 1
          elif [[ "${{ needs.integration-tests.result }}" == "failure" ]]; then
            echo "[WARN] Integration tests failed - check AI API connectivity"
            exit 1
          else
            echo "[PASS] All critical jobs passed"
            if [[ "${{ needs.security-scan.result }}" == "failure" ]]; then
              echo "[WARN] Security scan found issues - review artifacts"
            fi
          fi